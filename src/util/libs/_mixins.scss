/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
/// @param {string} $category Optional category to use.
/// @param {string} $where Optional pseudoelement to target (before or after).
@mixin icon($content: false, $category: regular, $where: before) {

	text-decoration: none;

	&:#{$where} {

		@if $content {
			content: $content;
		}

		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;
		display: inline-block;
		font-style: normal;
		font-variant: normal;
		text-rendering: auto;
		line-height: 1;
		text-transform: none !important;

		@if ($category ==brands) {
			font-family: 'Font Awesome 5 Brands';
		}

		@elseif ($category ==solid) {
			font-family: 'Font Awesome 5 Free';
			font-weight: 900;
		}

		@else {
			font-family: 'Font Awesome 5 Free';
			font-weight: 400;
		}

	}

}

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0, 0, 0, 0), $important: null) {

	@if $important {
		$important: '!important';
	}

	$x: 0.1em;

	@if unit(_size(element-margin))=='rem' {
		$x: 0.1rem;
	}

	padding: ($tb + nth($pad, 1)) ($lr + nth($pad, 2)) max($x, $tb - _size(element-margin) + nth($pad, 3)) ($lr + nth($pad, 4)) #{$important};

}

/// Encodes a SVG data URL so IE doesn't choke (via codepen.io/jakob-e/pen/YXXBrp).
/// @param {string} $svg SVG data URL.
/// @return {string} Encoded SVG data URL.
@function svg-url($svg){

$svg: str-replace($svg, '"', '\'');
$svg: str-replace($svg, '%', '%25');
$svg: str-replace($svg, '<', '%3C');
$svg: str-replace($svg, '>', '%3E');
$svg: str-replace($svg, '&', '%26');
$svg: str-replace($svg, '#', '%23');
$svg: str-replace($svg, '{', '%7B');
$svg: str-replace($svg, '}', '%7D');
$svg: str-replace($svg, ';', '%3B');

@return url("data:image/svg+xml;charset=utf8,#{$svg}");

}

/* Components */
@mixin color-box($p: null) {
	.box {
		border-color: _palette($p, border);
	}
}


@mixin color-button($p: null) {
	$highlight: _palette($p, highlight);

	input[type="submit"],
	input[type="reset"],
	input[type="button"],
	button,
	.button {
		background-color: transparent;
		box-shadow: inset 0 0 0 2px _palette($p, fg-bold);
		color: _palette($p, fg-bold) !important;

		&:hover {
			box-shadow: inset 0 0 0 2px _palette($p, accent);
			color: _palette($p, accent) !important;
		}

		&.primary {
			background-color: _palette($p, fg-bold);
			box-shadow: none;
			color: _palette($p, bg) !important;

			&:hover {
				background-color: _palette($p, accent);
			}
		}
	}
}

@mixin color-list($p: null) {
	ul {
		&.divided {
			li {
				border-top-color: _palette($p, border);
			}
		}

		&.icons {
			li {
				a.icon {
					&:hover {
						&:before {
							color: _palette($p, accent);
						}
					}
				}
			}

			&.alt {
				li {
					.icon {
						&:before {
							box-shadow: inset 0 0 0 2px _palette($p, border);
						}
					}

					a.icon {
						&:hover {
							&:before {
								box-shadow: inset 0 0 0 2px _palette($p, accent);
							}
						}
					}
				}
			}
		}
	}

}

@mixin color-section($p: null) {
	header {
		&.major {
			.date {

				&:before,
				&:after {
					border-top-color: _palette($p, border);
				}
			}
		}
	}
}

@mixin color-form($p: null) {
	label {
		color: _palette($p, fg-bold);
	}

	input[type="text"],
	input[type="password"],
	input[type="email"],
	select,
	textarea {
		border-color: _palette($p, border);

		&:focus {
			border-color: _palette($p, accent);
		}
	}

	select {
		background-image: svg-url("<svg xmlns='http://www.w3.org/2000/svg' width='40' height='40' preserveAspectRatio='none' viewBox='0 0 40 40'><path d='M9.4,12.3l10.4,10.4l10.4-10.4c0.2-0.2,0.5-0.4,0.9-0.4c0.3,0,0.6,0.1,0.9,0.4l3.3,3.3c0.2,0.2,0.4,0.5,0.4,0.9 c0,0.4-0.1,0.6-0.4,0.9L20.7,31.9c-0.2,0.2-0.5,0.4-0.9,0.4c-0.3,0-0.6-0.1-0.9-0.4L4.3,17.3c-0.2-0.2-0.4-0.5-0.4-0.9 c0-0.4,0.1-0.6,0.4-0.9l3.3-3.3c0.2-0.2,0.5-0.4,0.9-0.4S9.1,12.1,9.4,12.3z' fill='#{_palette($p, border)}' /></svg>");

		option {
			background-color: _palette($p, bg);
			color: _palette($p, fg);
		}
	}

	.select-wrapper {
		&:before {
			color: _palette($p, border);
		}
	}

	input[type="checkbox"],
	input[type="radio"] {
		&+label {
			color: _palette($p, fg);

			&:before {
				border-color: _palette($p, border);
			}
		}

		&:checked+label {
			&:before {
				background-color: _palette($p, fg-bold);
				border-color: _palette($p, fg-bold);
				color: _palette($p, bg);
			}
		}

		&:focus+label {
			&:before {
				border-color: _palette($p, accent);
			}
		}
	}

	::-webkit-input-placeholder {
		color: _palette($p, fg-light) !important;
	}

	:-moz-placeholder {
		color: _palette($p, fg-light) !important;
	}

	::-moz-placeholder {
		color: _palette($p, fg-light) !important;
	}

	:-ms-input-placeholder {
		color: _palette($p, fg-light) !important;
	}

	.formerize-placeholder {
		color: _palette($p, fg-light) !important;
	}
}

@mixin color-pagination($p: null) {
	.pagination {

		a,
		span {
			border-color: _palette($p, border);
		}

		a {
			color: _palette($p, fg-bold) !important;

			&:hover {
				color: _palette($p, accent) !important;
				border-color: _palette($p, accent);
				z-index: 1;

				&+a,
				&+span {
					border-left-color: _palette($p, accent);
				}
			}

			&.active {
				background-color: _palette($p, border);
			}
		}

		span {
			color: _palette($p, border);
		}
	}
}

@mixin color-table($p: null) {
	table {
		tbody {
			tr {
				border-color: _palette($p, border);

				&:nth-child(2n + 1) {
					background-color: _palette($p, border-bg);
				}
			}
		}

		th {
			color: _palette($p, fg-bold);
		}

		thead {
			border-bottom-color: _palette($p, border);
		}

		tfoot {
			border-top-color: _palette($p, border);
		}

		&.alt {
			tbody {
				tr {
					td {
						border-color: _palette($p, border);
					}
				}
			}
		}
	}
}

@include color-table;
@include color-pagination;
@include color-form;
@include color-section;
@include color-list;
@include color-box;
@include color-button;